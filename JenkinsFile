pipeline {
  agent {
    docker {
      image 'akash3601/maven-akash-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }

  stages {
    stage('Checkout') {
      steps {
        // Force a full clone (no shallow checkout)
        checkout([
          $class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: 'https://github.com/akashjaiswal360/Jenkins-Zero-To-Hero.git']],
          extensions: [[$class: 'CloneOption', noTags: false, shallow: false, depth: 0]]
        ])

        // Debug: Verify .git exists in the workspace root
        sh '''
          echo "DEBUG: After checkout"
          pwd
          ls -la
          find . -name .git
        '''
      }
    }

    stage('Build and Test') {
      steps {
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.53.140.77:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          // Use -Dsonar.token instead of deprecated -Dsonar.login
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.token=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "akash3601/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          // Build the Docker image in the correct subfolder
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''

          // Push the Docker image to Docker Hub
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "akashjaiswal360"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          // Run all Git commands from the workspace root with -C
          sh '''
            git -C ${WORKSPACE} config user.email "akkijais00@gmail.com"
            git -C ${WORKSPACE} config user.name "Akash Jaiswal"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git -C ${WORKSPACE} add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git -C ${WORKSPACE} commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "Nothing to commit"
            git -C ${WORKSPACE} remote set-url origin https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git
            git -C ${WORKSPACE} push origin HEAD:main || echo "Nothing to push"
          '''
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
